n.stage1
n.stage1 = 24
if (!is.integer(n.stage1) || length(n.stage1) != 1 || n.stage1 <= 0 ) {
stop("'n.stage1' must be a positive integer.")
}
is.integer(n.stage1)
if (!is.numeric(n.stage1) || length(n.stage1) != 1 || n.stage1 <= 0 ) {
stop("'n.stage1' must be a positive integer.")
}
as.integer(n.stage1)
devtools::document()
COCA.calibration(case = 1, n.stage2 = 20)
devtools::document()
COCA.calibration(case = 1, n.stage2 = 20)
devtools::document()
devtools::document()
utility.score
utility.score = c(0, 60, 40, 100)
if (length(utility.score) != 4) stop(sprintf("'utility.score' must have length 4. Got: %s", length(utility.score)))
tox.AB
tox.AB = c(0.30, 0.30, 0.15)
eff.AB.s1
eff.AB.s1 = c(0.25, 0.25, 0.25)
eff.AB.s2 = c(0.25, 0.25, 0.25)
if (!(length(tox.AB) == length(eff.AB.s1) && length(eff.AB.s1) == length(eff.AB.s2))) {
stop(sprintf("'tox.AB', 'eff.AB.s1', and 'eff.AB.s2' must have the same length."))
}
for (param_name in c("tox.AB", "eff.AB.s1", "eff.AB.s2")) {
param_value <- get(param_name)
if (!is.numeric(param_value) || any(param_value) < 0 || any(param_value) > 1) {
stop(sprintf("'%s' must be between 0 and 1.", param_name))
}
}
tox.AB
eff.AB.s1
eff.AB.s2
param_name
param_value
param_value <- get(param_name)
param_value
is.numeric(param_value)
for (param_name in c("tox.AB", "eff.AB.s1", "eff.AB.s2")) {
param_value <- get(param_name)
if (!is.numeric(param_value) || any(param_value < 0) || any(param_value > 1)) {
stop(sprintf("'%s' must be between 0 and 1.", param_name))
}
}
rho
rho = 0.2
is.numeric(rho)
if (!is.numeric(rho) || length(rho) != 1 || rho < -1 || rho > 1) {
stop(sprintf("'rho' must be a numeric value in [-1, 1]."))
}
devtools::document()
COCA.getOC(
n.stage2 = 26, Ce = 0.8983, c0 = 0.7,
tox.SOC = 0.10, eff.SOC = 0.25, tox.A = 0.25, tox.B = 0.15,
eff.A = 0.35, eff.B = 0.35, tox.AB = c(0.30, 0.30, 0.15),
eff.AB.s1 = c(0.75, 0.75, 0.75), eff.AB.s2 = c(0.55, 0.55, 0.55),
n.simu = 20
)
devtools::document()
COCA.getOC(
n.stage2 = 26, Ce = 0.8983, c0 = 0.7,
tox.SOC = 0.10, eff.SOC = 0.25, tox.A = 0.25, tox.B = 0.15,
eff.A = 0.35, eff.B = 0.35, tox.AB = c(0.30, 0.30, 0.15),
eff.AB.s1 = c(0.75, 0.75, 0.75), eff.AB.s2 = c(0.55, 0.55, 0.55),
n.simu = 20
)
devtools::document()
devtools::document()
?use_rcpp
usethis::use_rcpp("calculation")
devtools::document()
usethis::use_rcpp_eigen()
devtools::document()
usethis::use_rcpp_armadillo()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
COCA.calibration(
case = 1, n.stage1 = 24, n.stage2 = 20, eff.null = 0.25,
eff.alt.SOC = 0.25, eff.alt.A = 0.35, eff.alt.B = 0.35, eff.alt.AB = 0.55,
period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 20
)
devtools::document()
renv::snapshot()
devtools::document()
COCA.calibration(
case = 1, n.stage1 = 24, n.stage2 = 20, eff.null = 0.25,
eff.alt.SOC = 0.25, eff.alt.A = 0.35, eff.alt.B = 0.35, eff.alt.AB = 0.55,
period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 20
)
install.packages("pbapply")
usethis::use_package(package = "pbapply", type = "Imports")
renv::snapshot()
devtools::document()
COCA.calibration(
case = 1, n.stage1 = 24, n.stage2 = 20, eff.null = 0.25,
eff.alt.SOC = 0.25, eff.alt.A = 0.35, eff.alt.B = 0.35, eff.alt.AB = 0.55,
period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 20
)
devtools::document()
COCA.calibration(
case = 1, n.stage1 = 24, n.stage2 = 20, eff.null = 0.25,
eff.alt.SOC = 0.25, eff.alt.A = 0.35, eff.alt.B = 0.35, eff.alt.AB = 0.55,
period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 20
)
devtools::document()
devtools::document()
devtools::document()
renv::snapshot()
devtools::document()
c(0, 0, 0, 0, rep(1, ndose))[-c(2, 3)]
ndose=3
c(0, 0, 0, 0, rep(1, ndose))[-c(2, 3)]
c(0, 0, 0, 0, rep(1, ndose))[-3]
c(0, 0, 0, 0, rep(1, ndose))
fda_sc
fda_sc=1
switch(fda_sc, v <- c(rep(0, 4), rep(1, ndose)), v[-c(2, 3)], v[-3])
vtmp <- c(rep(0, 4), rep(1, ndose))
period <- switch(fda_sc, vtmp, vtmp[-c(2, 3)], vtmp[-3])
period
switch(fda_sc, vtmp, vtmp[-c(2, 3)], vtmp[-3])
switch(2, vtmp, vtmp[-c(2, 3)], vtmp[-3])
switch(3, vtmp, vtmp[-c(2, 3)], vtmp[-3])
styler:::style_active_file()
dosage_level
matrix(c(300, 200, 0, 300, 200, 0), nrow = 2, byrow = TRUE)
dosage_level <- matrix(c(300, 200, 0, 300, 200, 0), nrow = 2, byrow = TRUE)
row.names(dosage_level) <- c("A", "B")
dosage_level
dose_level_std <- t(apply(dosage_level, MARGIN = 1, .dose_standardize))
dose_level_std
dose_std <- matrix(c(
dose_level_std["A", 1], dose_level_std["B", 1],
dose_level_std["A", 1], dose_level_std["B", 2],
dose_level_std["A", 2], dose_level_std["B", 1]
), ncol = ndose, byrow = FALSE)
dose_std
dose_level_std
sapply(1:ndose, function(r) {
c(
dose_level_std["A", 3], dose_std["A", 1], dose_level_std["A", 3],
dose_std["A", r], dose_std["A", ]
)
})
dose_std
dose_level_std
list(A = c(300, 200, 0), B = c(300, 200, 0))
dosage_level <- matrix(c(300, 200, 0, 300, 200, 0), nrow = 2, byrow = TRUE)
row.names(dosage_level) <- c("A", "B")
dose_level_std <- t(apply(dosage_level, MARGIN = 1, .dose_standardize))
dose_std <- matrix(c(
dose_level_std["A", 1], dose_level_std["B", 1],
dose_level_std["A", 1], dose_level_std["B", 2],
dose_level_std["A", 2], dose_level_std["B", 1]
), ncol = ndose, byrow = FALSE)
row.names(dose_std) <- c("A", "B")
dose_std
list(A = c(300, 300, 200), B = c(300, 200, 300))
dosage_level
dose_std
dosage.comb = list(A = c(300, 300, 200), B = c(300, 200, 300))
dosage.comb
dose_std <- matrix(c(
dose_level_std["A", 1], dose_level_std["B", 1],
dose_level_std["A", 1], dose_level_std["B", 2],
dose_level_std["A", 2], dose_level_std["B", 1]
), ncol = ndose, byrow = FALSE)
dose_std
matrix(dosage.comb)
dose_std <- do.call(rbind, dosage.comb)
dose_std
t(apply(dosage.comb, MARGIN = 1, .dose_standardize))
.dose_standardize
dosage.comb
dosage.comb <- do.call(rbind, dosage.comb)
t(apply(dosage.comb, MARGIN = 1, .dose_standardize))
matrix(c(
dose_level_std["A", 1], dose_level_std["B", 1],
dose_level_std["A", 1], dose_level_std["B", 2],
dose_level_std["A", 2], dose_level_std["B", 1]
), ncol = ndose, byrow = FALSE)
dose_level_std
dose_std
dosage.comb
dosage.singleA = 300
dosage.singleB = 300
cbind(dosage.comb, c(dosage.singleA, dosage.singleB))
# dosage_level <- matrix(c(300, 200, 0, 300, 200, 0), nrow = 2, byrow = TRUE)
# row.names(dosage_level) <- c("A", "B")
# dose_level_std <- t(apply(dosage_level, MARGIN = 1, .dose_standardize))
# dose_std <- matrix(c(
#   dose_level_std["A", 1], dose_level_std["B", 1],
#   dose_level_std["A", 1], dose_level_std["B", 2],
#   dose_level_std["A", 2], dose_level_std["B", 1]
# ), ncol = ndose, byrow = FALSE)
dose_std <- t(apply(cbind(c(dosage.singleA, dosage.singleB), dosage.comb), MARGIN = 1, .dose_standardize))
dose_std
seq_along(n.comb.dose)
seq_along(ndose)
paste0("comb", 1:ndose)
# dosage_level <- matrix(c(300, 200, 0, 300, 200, 0), nrow = 2, byrow = TRUE)
# row.names(dosage_level) <- c("A", "B")
# dose_level_std <- t(apply(dosage_level, MARGIN = 1, .dose_standardize))
# dose_std <- matrix(c(
#   dose_level_std["A", 1], dose_level_std["B", 1],
#   dose_level_std["A", 1], dose_level_std["B", 2],
#   dose_level_std["A", 2], dose_level_std["B", 1]
# ), ncol = ndose, byrow = FALSE)
dose_std <- t(apply(cbind(c(dosage.singleA, dosage.singleB), dosage.comb), MARGIN = 1, .dose_standardize))
row.names(dose_std) <- c("A", "B")
colnames(dose_std) <- c("single", paste0("comb", 1:ndose))
dose_std
# dosage_level <- matrix(c(300, 200, 0, 300, 200, 0), nrow = 2, byrow = TRUE)
# row.names(dosage_level) <- c("A", "B")
# dose_level_std <- t(apply(dosage_level, MARGIN = 1, .dose_standardize))
# dose_std <- matrix(c(
#   dose_level_std["A", 1], dose_level_std["B", 1],
#   dose_level_std["A", 1], dose_level_std["B", 2],
#   dose_level_std["A", 2], dose_level_std["B", 1]
# ), ncol = ndose, byrow = FALSE)
dose_std <- t(apply(cbind(c(dosage.singleA, dosage.singleB), dosage.comb), MARGIN = 1, .dose_standardize))
row.names(dose_std) <- c("A", "B")
dose_std
dose_std_single <- dose_std[, 1]
dose_std_single
dose_std_comb <- dose_std[, -1]
dose_std_comb
X1_all <- sapply(1:ndose, function(r) {
c(0, dose_std_single["A"], 0, dose_std_comb["A", r], dose_std_comb["A", ])
})
X2_all <- sapply(1:ndose, function(r) {
c(0, 0, dose_std_single["B"], dose_std_comb["B", r], dose_std_comb["B", ])
})
X1_all
X2_all
paste0("j=", 1:ndose)
styler:::set_style_transformers()
styler::style_text(
"x <- switch(a, 1, 2, 3)",
style = styler::tidyverse_style(
reindention = styler::specify_reindention(
regex_pattern = "switch\\(",
indention = 0,
comments_only = FALSE
)
)
)
X1 <- switch(fda_sc, X1_all, X1_all[-c(2,3), ], X1_all[-3, ])
X2 <- switch(fda_sc, X2_all, X2_all[c(1, 4, 5, 6, 7), ], X2_all[-3, ])
X2
X.mtx.all <- lapply(1:ndose, function(r) {
cbind(1, X1[, r], X2[, r], (X1[, r] * X2[, r]), (X1[, r] * X2[, r] * period))
})
period
X.mtx.all
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#' @keywords internal
run.whole <- function(fda.case = 1, n.comb.dose = 3,
n.stage1 = 24, n.stage2,
dosage.singleA = 300, dosage.singleB = 300,
dosage.comb = list(A = c(300, 300, 200), B = c(300, 200, 300)),
eff.ctrl, eff.A, eff.B, eff.AB, period_eff = 0,
batch.idx, batch.sn = 100) {
set.seed(1233 + 10 * batch.idx + 100 * period_eff)
sn_s1 <- batch.sn
fda_sc <- fda.case
ndose <- n.comb.dose
n_21 <- n.stage1
n_22 <- n.stage2
narm_22 <- switch(fda_sc, 4, 2, 3)
vtmp <- c(rep(0, 4), rep(1, ndose))
period <- switch(fda_sc, vtmp, vtmp[-c(2, 3)], vtmp[-3])
dosage.comb <- do.call(rbind, dosage.comb)
dose_std <- t(apply(cbind(c(dosage.singleA, dosage.singleB), dosage.comb), MARGIN = 1, .dose_standardize))
row.names(dose_std) <- c("A", "B")
dose_std_single <- dose_std[, 1]
dose_std_comb <- dose_std[, -1]
Econtrol <- eff.ctrl
singleA <- eff.A
singleB <- eff.B
comb <- eff.AB
comb_s1 <- comb + period_eff
#### Stage I
Ye_21 <- sapply(1:sn_s1, function(r) rbinom(rep(1, ndose), n_21, prob = comb_s1))
q_hat <- (Ye_21 + 0.1) / (n_21 + 0.2)
j_ast <- sapply(1:sn_s1, function(r) .find_order_stat(order = 1, q = q_hat[, r]))
X1_all <- sapply(1:ndose, function(r) {
c(0, dose_std_single["A"], 0, dose_std_comb["A", r], dose_std_comb["A", ])
})
X2_all <- sapply(1:ndose, function(r) {
c(0, 0, dose_std_single["B"], dose_std_comb["B", r], dose_std_comb["B", ])
})
colnames(X1_all) <- colnames(X2_all) <- paste0("j=", 1:ndose)
X1 <- switch(fda_sc, X1_all, X1_all[-c(2,3), ], X1_all[-3, ])
X2 <- switch(fda_sc, X2_all, X2_all[-c(2,3), ], X2_all[-3, ])
eff_22_all <- rbind(rep(Econtrol, sn_s1), rep(singleA, sn_s1), rep(singleB, sn_s1), rep(comb, sn_s1))
eff_22 <- switch(fda_sc,
eff_22_all,
eff_22_all[c(1, 4), ],
eff_22_all[-3, ]
)
BCI_c_batch <- matrix(NA, nrow = (narm_22 - 1), ncol = sn_s1) # BCI for stage II
Ye_22 <- sapply(1:sn_s1, function(r) rbinom(rep(1, narm_22), n_22, prob = eff_22[, r]))
X.mtx.all <- lapply(1:ndose, function(r) {
cbind(1, X1[, r], X2[, r], (X1[, r] * X2[, r]), (X1[, r] * X2[, r] * period))
})
Beta_prior <- .get_Beta_prior(n.sample = 1e6, type = 2)
pE_prior_list <- lapply(1:ndose, function(r) {
expit(MtxProd(X.mtx.all[[r]], Beta_prior))
})
logpE_prior0_list <- lapply(1:ndose, function(r)
log(pE_prior_list[[r]])
)
logpE_prior1_list <- lapply(1:ndose, function(r)
log(1 - pE_prior_list[[r]])
)
data_Y <- t(rbind(Ye_22, Ye_21))
data_N <- c(rep(n_22, narm_22), rep(n_21, ndose))
BCI_c_batch <- pbsapply(1:sn_s1, function(i) {
pE_prior <- pE_prior_list[[j_ast[i]]]
logpE_prior0 <- logpE_prior0_list[[j_ast[i]]]
logpE_prior1 <- logpE_prior1_list[[j_ast[i]]]
X.mtx <- X.mtx.all[[j_ast[i]]]
pE_post <- .get_post(
Beta_prior = Beta_prior, X.mtx = X.mtx, pE_prior = pE_prior,
logpE_prior0 = logpE_prior0, logpE_prior1 = logpE_prior1,
data_Y = data_Y[i, ], data_N = data_N
)
output <- sapply(1:(narm_22 - 1), function(r) mean(pE_post[narm_22, ] > pE_post[r, ]) )
return(output)
})
return(BCI_c_batch)
}
#' @keywords internal
run.whole <- function(fda.case = 1, n.comb.dose = 3,
n.stage1 = 24, n.stage2,
dosage.singleA, dosage.singleB, dosage.comb,
eff.ctrl, eff.A, eff.B, eff.AB, period_eff = 0,
batch.idx, batch.sn = 100) {
set.seed(1233 + 10 * batch.idx + 100 * period_eff)
sn_s1 <- batch.sn
fda_sc <- fda.case
ndose <- n.comb.dose
n_21 <- n.stage1
n_22 <- n.stage2
narm_22 <- switch(fda_sc, 4, 2, 3)
vtmp <- c(rep(0, 4), rep(1, ndose))
period <- switch(fda_sc, vtmp, vtmp[-c(2, 3)], vtmp[-3])
dosage.comb <- do.call(rbind, dosage.comb)
dose_std <- t(apply(cbind(c(dosage.singleA, dosage.singleB), dosage.comb), MARGIN = 1, .dose_standardize))
row.names(dose_std) <- c("A", "B")
dose_std_single <- dose_std[, 1]
dose_std_comb <- dose_std[, -1]
Econtrol <- eff.ctrl
singleA <- eff.A
singleB <- eff.B
comb <- eff.AB
comb_s1 <- comb + period_eff
#### Stage I
Ye_21 <- sapply(1:sn_s1, function(r) rbinom(rep(1, ndose), n_21, prob = comb_s1))
q_hat <- (Ye_21 + 0.1) / (n_21 + 0.2)
j_ast <- sapply(1:sn_s1, function(r) .find_order_stat(order = 1, q = q_hat[, r]))
X1_all <- sapply(1:ndose, function(r) {
c(0, dose_std_single["A"], 0, dose_std_comb["A", r], dose_std_comb["A", ])
})
X2_all <- sapply(1:ndose, function(r) {
c(0, 0, dose_std_single["B"], dose_std_comb["B", r], dose_std_comb["B", ])
})
colnames(X1_all) <- colnames(X2_all) <- paste0("j=", 1:ndose)
X1 <- switch(fda_sc, X1_all, X1_all[-c(2,3), ], X1_all[-3, ])
X2 <- switch(fda_sc, X2_all, X2_all[-c(2,3), ], X2_all[-3, ])
eff_22_all <- rbind(rep(Econtrol, sn_s1), rep(singleA, sn_s1), rep(singleB, sn_s1), rep(comb, sn_s1))
eff_22 <- switch(fda_sc,
eff_22_all,
eff_22_all[c(1, 4), ],
eff_22_all[-3, ]
)
BCI_c_batch <- matrix(NA, nrow = (narm_22 - 1), ncol = sn_s1) # BCI for stage II
Ye_22 <- sapply(1:sn_s1, function(r) rbinom(rep(1, narm_22), n_22, prob = eff_22[, r]))
X.mtx.all <- lapply(1:ndose, function(r) {
cbind(1, X1[, r], X2[, r], (X1[, r] * X2[, r]), (X1[, r] * X2[, r] * period))
})
Beta_prior <- .get_Beta_prior(n.sample = 1e6, type = 2)
pE_prior_list <- lapply(1:ndose, function(r) {
expit(MtxProd(X.mtx.all[[r]], Beta_prior))
})
logpE_prior0_list <- lapply(1:ndose, function(r)
log(pE_prior_list[[r]])
)
logpE_prior1_list <- lapply(1:ndose, function(r)
log(1 - pE_prior_list[[r]])
)
data_Y <- t(rbind(Ye_22, Ye_21))
data_N <- c(rep(n_22, narm_22), rep(n_21, ndose))
BCI_c_batch <- pbsapply(1:sn_s1, function(i) {
pE_prior <- pE_prior_list[[j_ast[i]]]
logpE_prior0 <- logpE_prior0_list[[j_ast[i]]]
logpE_prior1 <- logpE_prior1_list[[j_ast[i]]]
X.mtx <- X.mtx.all[[j_ast[i]]]
pE_post <- .get_post(
Beta_prior = Beta_prior, X.mtx = X.mtx, pE_prior = pE_prior,
logpE_prior0 = logpE_prior0, logpE_prior1 = logpE_prior1,
data_Y = data_Y[i, ], data_N = data_N
)
output <- sapply(1:(narm_22 - 1), function(r) mean(pE_post[narm_22, ] > pE_post[r, ]) )
return(output)
})
return(BCI_c_batch)
}
devtools::document()
styler:::style_selection()
devtools::document()
View(run.whole)
rm(list = run.period())
rm(list = run.period
)
rm(list = c("run.whole"))
rm(list = c("run.period"))
COCA.calibration(
case = 1, n.comb.dose = 3, n.stage1 = 24, n.stage2 = 20,
dosage.singleA = 300, dosage.singleB = 300,
dosage.comb = list(A = c(300, 300, 200), B = c(300, 200, 300)),
eff.null = 0.25, eff.alt.SOC = 0.25, eff.alt.A = 0.35,
eff.alt.B = 0.35, eff.alt.AB = 0.55, period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 10
)
gc()
COCA.calibration(
case = 1, n.comb.dose = 3, n.stage1 = 24, n.stage2 = 20,
dosage.singleA = 300, dosage.singleB = 300,
dosage.comb = list(A = c(300, 300, 200), B = c(300, 200, 300)),
eff.null = 0.25, eff.alt.SOC = 0.25, eff.alt.A = 0.35,
eff.alt.B = 0.35, eff.alt.AB = 0.55, period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 10
)
n.stage2 <- 10:20
i=1
seq_along(n.stage2)
i
output <- COCA.calibration(
case = 1, n.comb.dose = 3, n.stage1 = 24, n.stage2 = n.stage2[i],
dosage.singleA = 300, dosage.singleB = 300,
dosage.comb = list(A = c(300, 300, 200), B = c(300, 200, 300)),
eff.null = 0.25, eff.alt.SOC = 0.25, eff.alt.A = 0.35,
eff.alt.B = 0.35, eff.alt.AB = 0.55, period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 10
)
output
i=2
output.tmp <- COCA.calibration(
case = 1, n.comb.dose = 3, n.stage1 = 24, n.stage2 = n.stage2[i],
dosage.singleA = 300, dosage.singleB = 300,
dosage.comb = list(A = c(300, 300, 200), B = c(300, 200, 300)),
eff.null = 0.25, eff.alt.SOC = 0.25, eff.alt.A = 0.35,
eff.alt.B = 0.35, eff.alt.AB = 0.55, period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 10
)
output.tmp
output <- bind_rows(output, output.tmp)
output
rbind(output, output.tmp)
devtools::document()
devtools::document()
COCA.calibration(
case = 1, n.comb.dose = 3, n.stage1 = 24, n.stage2 = 20,
dosage.singleA = 300, dosage.singleB = 300,
dosage.comb = list(A = c(300, 300, 200), B = c(300, 200, 300)),
eff.null = 0.25, eff.alt.SOC = 0.25, eff.alt.A = 0.35,
eff.alt.B = 0.35, eff.alt.AB = 0.55, period.effect = c(0.1, 0.2, 0.3),
alpha.level = 0.10, alpha.max = 0.20, fsr.level = 0.05, tsr.level = 0.80,
n.simu = 10
)
devtools::document()
ctrl <- "A"
match.arg(ctrl)
ctrl <- match.arg(ctrl)
?match.arg
ctrl <- match.arg(ctrl, choices = c("placebo", "A", "B"))
ctrl
ctrl <- A
?switch
ccc <- c("b","QQ","a","A","bb")
# note: cat() produces no output for NULL
for(ch in ccc)
cat(ch,":", switch(EXPR = ch, a = 1, b = 2:3), "\n")
switch(ctrl, placebo = 0, A = dose_std_single["A"], B = dose_std_single["B"])
dose_std_single
dose_std_single <- dose_std[, 1]
rm(list = ls())
library(readr)
library(filelock)
